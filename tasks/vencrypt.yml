---
- name: VeNCrypt | create temporary certificate directory
  ansible.builtin.file:
    path: "{{ vencrypt_tmp_dir }}"
    state: directory
    mode: "0700"
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true

- name: VeNCrypt | create server certificate directory on compute node
  ansible.builtin.file:
    path: "{{ vencrypt_server_dir }}"
    state: directory
    mode: "0755"
  become: true
  when: inventory_hostname in groups['compute']

- name: VeNCrypt | create client certificate directory on controller node
  ansible.builtin.file:
    path: "{{ vencrypt_client_dir }}"
    state: directory
    mode: "0755"
  become: true
  when: inventory_hostname in groups['controller']

- name: VeNCrypt | create CA private key with password protection
  community.crypto.openssl_privatekey:
    path: "{{ vencrypt_tmp_ca.key }}"
    passphrase: "{{ vencrypt_passphrase }}"
    select_crypto_backend: cryptography
    type: RSA
    size: 4096
    cipher: auto
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true

- name: VeNCrypt | create CSR for CA certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ vencrypt_tmp_ca.key }}"
    privatekey_passphrase: "{{ vencrypt_passphrase }}"
    country_name: "{{ vencrypt_subj.country_name }}"
    state_or_province_name: "{{ vencrypt_subj.state_or_province_name }}"
    organization_name: "{{ vencrypt_subj.organization_name }}"
    common_name: "{{ vencrypt_subj.common_name }}"
    email_address: "{{ vencrypt_subj.email_address }}"
    use_common_name_for_san: false
    basic_constraints:
      - 'CA:TRUE'
    basic_constraints_critical: true
    key_usage:
      - keyCertSign
    key_usage_critical: true
  register: ca_csr
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true

- name: VeNCrypt | create CA certificate
  community.crypto.x509_certificate:
    path: "{{ vencrypt_tmp_ca.crt }}"
    csr_content: "{{ ca_csr.csr }}"
    ownca_not_after: "+36500d"
    ownca_not_before: "+0s"
    privatekey_path: "{{ vencrypt_tmp_ca.key }}"
    privatekey_passphrase: "{{ vencrypt_passphrase }}"
    provider: selfsigned
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true

- name: VeNCrypt | copy ca certificate file to compute node
  ansible.builtin.copy:
    dest: "{{ vencrypt_server_dir }}/ca-cert.pem"
    src: "{{ vencrypt_tmp_ca.crt }}"
    owner: "root"
    group: "root"
    mode: "0644"
  become: true
  when: inventory_hostname in groups['compute']

- name: VeNCrypt | copy ca certificate file to controller node
  ansible.builtin.copy:
    dest: "{{ vencrypt_client_dir }}/ca-cert.pem"
    src: "{{ vencrypt_tmp_ca.crt }}"
    owner: "root"
    group: "root"
    mode: "0644"
  become: true
  when: inventory_hostname in groups['controller']

- name: VeNCrypt | create private key for server certificate
  community.crypto.openssl_privatekey:
    path: "{{ vencrypt_tmp_server.key }}"
    select_crypto_backend: cryptography
    type: RSA
    size: 4096
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true

- name: VeNCrypt | create CSR for server certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ vencrypt_tmp_server.key }}"
    country_name: "{{ vencrypt_subj.country_name }}"
    state_or_province_name: "{{ vencrypt_subj.state_or_province_name }}"
    organization_name: "{{ vencrypt_subj.organization_name }}"
    common_name: "{{ vencrypt_subj.common_name }}"
    email_address: "{{ vencrypt_subj.email_address }}"
    use_common_name_for_san: false
  register: server_csr
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true

- name: VeNCrypt | check if server certificate exists
  ansible.builtin.stat:
    path: "{{ vencrypt_server_cert }}"
  register: server_cert_exists
  when: inventory_hostname in groups['compute']

- name: VeNCrypt | read certificate if exists
  ansible.builtin.slurp:
    src: "{{ vencrypt_server_cert }}"
  register: server_certificate
  when:
    - inventory_hostname in groups['compute']
    - server_cert_exists.stat.exists

- name: VeNCrypt | sign certificate with CA
  community.crypto.x509_certificate_pipe:
    content: "{{ (server_certificate.content | b64decode) if server_cert_exists.stat.exists else omit }}"
    csr_content: "{{ server_csr.csr }}"
    provider: ownca
    ownca_path: "{{ vencrypt_tmp_ca.crt }}"
    ownca_privatekey_path: "{{ vencrypt_tmp_ca.key }}"
    ownca_privatekey_passphrase: "{{ vencrypt_passphrase }}"
    ownca_not_after: "+36500d"
    ownca_not_before: "+0s"
  register: server_cert
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true

- name: VeNCrypt | write server certificate file on compute nodes
  ansible.builtin.copy:
    dest: "{{ vencrypt_server_dir }}/server-cert.pem"
    content: "{{ server_cert.certificate }}"
    owner: "root"
    group: "root"
    mode: "0644"
  become: true
  when:
    - inventory_hostname in groups['compute']
    - server_cert is changed

- name: VeNCrypt | copy server key file on compute node
  ansible.builtin.copy:
    dest: "{{ vencrypt_server_key }}"
    src: "{{ vencrypt_tmp_server.key }}"
    owner: "root"
    group: "qemu"
    mode: "0640"
  become: true
  when: inventory_hostname in groups['compute']

- name: VeNCrypt | create private key for client certificate
  community.crypto.openssl_privatekey:
    path: "{{ vencrypt_tmp_client.key }}"
    select_crypto_backend: cryptography
    type: RSA
    size: 4096
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true

- name: VeNCrypt | create CSR for client certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ vencrypt_tmp_client.key }}"
    country_name: "{{ vencrypt_subj.country_name }}"
    state_or_province_name: "{{ vencrypt_subj.state_or_province_name }}"
    organization_name: "{{ vencrypt_subj.organization_name }}"
    common_name: "{{ vencrypt_subj.common_name }}"
    email_address: "{{ vencrypt_subj.email_address }}"
    use_common_name_for_san: false
  register: client_csr
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true

- name: VeNCrypt | check if client certificate exists
  ansible.builtin.stat:
    path: "{{ vencrypt_client_cert }}"
  register: client_cert_exists
  when: inventory_hostname in groups['compute']

- name: VeNCrypt | read certificate if exists
  ansible.builtin.slurp:
    src: "{{ vencrypt_client_cert }}"
  register: client_certificate
  when:
    - inventory_hostname in groups['compute']
    - client_cert_exists.stat.exists

- name: VeNCrypt | sign certificate with CA
  community.crypto.x509_certificate_pipe:
    content: "{{ (client_certificate.content | b64decode) if client_cert_exists.stat.exists else omit }}"
    csr_content: "{{ client_csr.csr }}"
    provider: ownca
    ownca_path: "{{ vencrypt_tmp_ca.crt }}"
    ownca_privatekey_path: "{{ vencrypt_tmp_ca.key }}"
    ownca_privatekey_passphrase: "{{ vencrypt_passphrase }}"
    ownca_not_after: "+36500d"
    ownca_not_before: "+0s"
  register: client_cert
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true

- name: VeNCrypt | write client certificate file on controller node
  ansible.builtin.copy:
    dest: "{{ vencrypt_client_cert }}"
    content: "{{ client_cert.certificate }}"
    owner: "root"
    group: "root"
    mode: "0644"
  become: true
  when:
    - inventory_hostname in groups['controller']
    - client_cert is changed

- name: VeNCrypt | copy client key file on controller node
  ansible.builtin.copy:
    dest: "{{ vencrypt_client_key }}"
    src: "{{ vencrypt_tmp_client.key }}"
    owner: "root"
    group: "{{ os_service_name }}"
    mode: "0640"
  become: true
  when: inventory_hostname in groups['controller']

- name: VeNCrypt | remove temporary certificate directory
  ansible.builtin.file:
    path: "{{ vencrypt_tmp_dir }}"
    state: absent
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: true
...
